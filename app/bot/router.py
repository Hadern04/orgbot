import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command, CommandStart, ChatMemberUpdatedFilter, MEMBER
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated
from sqlalchemy.exc import SQLAlchemyError
from app.api.dao import UserDAO, EventDAO, ContractorDAO, ChatDAO
from app.bot.keyboards import main_menu_keyboard, calendar_keyboard, contractors_menu_keyboard, contractors_list_keyboard, \
    budget_menu_keyboard, budget_summary_keyboard
from app.bot.table import get_budget_info

router = Router()


# --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---
async def greet_user(message: Message, is_new_user: bool) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    greeting = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" if is_new_user else "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º"
    await message.answer(
        f"{greeting}, <b>{message.from_user.full_name}</b>!\n\n"
        "–Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=main_menu_keyboard(user_id=message.from_user.id)
    )


@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π."""
    user = await UserDAO.find_one_or_none(telegram_id=message.from_user.id)
    if not user:
        await UserDAO.add(
            telegram_id=message.from_user.id,
            first_name=message.from_user.first_name,
            username=message.from_user.username
        )

    await greet_user(message, is_new_user=not user)


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback.message.edit_text(
        "–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=main_menu_keyboard(user_id=callback.from_user.id)
    )
    await callback.answer()


# --- –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π ---
@router.callback_query(F.data == "calendar_view")
async def view_calendar(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = await UserDAO.find_one_with_events(telegram_id=callback.from_user.id)
    events = user.events

    if not events:
        text = "üóì –í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç.\n\n"
    else:
        text = "üóì –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
        sorted_events = sorted(events, key=lambda x: x.event_date)
        for event in sorted_events:
            text += f"‚ñ™Ô∏è {event.title}\n"
            text += f"        –î–∞—Ç–∞: {event.event_date.strftime('%d.%m.%Y')}\n"
            if event.location:
                text += f"        –ú–µ—Å—Ç–æ: {event.location}\n"
            text += "\n"

    text += "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/add –ù–∞–∑–≤–∞–Ω–∏–µ, –î–î.–ú–ú.–ì–ì–ì–ì, –ú–µ—Å—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)`"
    await callback.message.edit_text(text, reply_markup=calendar_keyboard(), parse_mode='Markdown')
    await callback.answer()


@router.message(Command("add"))
async def add_event(message: Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ."""
    user = await UserDAO.find_one_or_none(telegram_id=message.from_user.id)
    try:
        # –£–±–∏—Ä–∞–µ–º /add –∏–∑ —Å—Ç—Ä–æ–∫–∏
        args_str = message.text.split(maxsplit=1)[1]
        parts = [p.strip() for p in args_str.split(',')]
        title = parts[0]
        date_str = parts[1]
        location = parts[2] if len(parts) > 2 else None

        if not title or not date_str:
            raise ValueError()

        event_date = datetime.strptime(date_str, "%d.%m.%Y").date()

        await EventDAO.add(
            title=title,
            event_date=event_date,
            location=location,
            user_id=user.id
        )
        await message.reply(f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {date_str}!")

    except (IndexError, ValueError):
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/add –ù–∞–∑–≤–∞–Ω–∏–µ, –î–î.–ú–ú.–ì–ì–ì–ì, –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è`\n"
            "–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å.\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/add –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è, 25.10.2025, –ú–æ—Å–∫–≤–∞`",
            parse_mode='Markdown'
        )
    except SQLAlchemyError as e:
        logging.error(f"DB Error on adding event: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")


# --- –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ ---
@router.callback_query(F.data == "contractors_menu")
async def show_contractors_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤."""

    logging.info("Callback 'contractors_menu' received.")
    categories = await ContractorDAO.get_all_categories()
    logging.info(f"Retrieved categories: {categories}")

    if not categories:
        await callback.answer("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.", show_alert=True)
        return

    await callback.message.edit_text(
        "üë• –°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=contractors_menu_keyboard(categories)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("contractor_category_"))
async def show_contractor_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""

    category = callback.data.split('_')[-1]
    contractors = await ContractorDAO.find_all(category=category)

    text = f"üë• {category}:\n\n"
    if not contractors:
        text += "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."
    else:
        for contractor in contractors:
            text += f"‚ñ™Ô∏è –ò–º—è/–ù–∞–∑–≤–∞–Ω–∏–µ: {contractor.name}\n"
            text += f"        –ö–æ–Ω—Ç–∞–∫—Ç: {contractor.contact}\n\n"

    await callback.message.edit_text(
        text,
        reply_markup=contractors_list_keyboard()
    )
    await callback.answer()


# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—é–¥–∂–µ—Ç–µ
@router.callback_query(F.data == "budget_menu")
async def budget_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=budget_menu_keyboard()
    )


@router.callback_query(F.data == "budget_summary")
async def show_budget_summary(callback: CallbackQuery):
    gsheet_key = '1UJS5Ndx8IYD0q6uSeJbzUyGzGMGxSobSIYE1EpEFwIc'
    try:
        result = get_budget_info(gsheet_key)
        await callback.message.edit_text(
            result,
            reply_markup=budget_summary_keyboard()
        )
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞–º–∏ ---
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def on_new_chat_member(event: ChatMemberUpdated):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Ç, –∫–æ–≥–¥–∞ –±–æ—Ç–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É."""
    chat_info = event.chat
    try:
        existing_chat = await ChatDAO.find_one_or_none(chat_id=chat_info.id)
        if not existing_chat:
            await ChatDAO.add(
                chat_id=chat_info.id,
                chat_title=chat_info.title
            )
            logging.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —á–∞—Ç: {chat_info.title} (ID: {chat_info.id})")
    except SQLAlchemyError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ –≤ –ë–î: {e}")
